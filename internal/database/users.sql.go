// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, username, hashed_pw, admin, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, username, hashed_pw, admin, created_at, updated_at
`

type CreateUserParams struct {
	UserID    uuid.UUID
	Username  string
	HashedPw  string
	Admin     bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.HashedPw,
		arg.Admin,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.HashedPw,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, hashed_pw, admin, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.HashedPw,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, username, hashed_pw, admin, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.HashedPw,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, hashed_pw, admin, created_at, updated_at FROM users ORDER BY username
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.HashedPw,
			&i.Admin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET username = $1, updated_at = $2 WHERE user_id = $3
RETURNING user_id, username, hashed_pw, admin, created_at, updated_at
`

type UpdateUserParams struct {
	Username  string
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Username, arg.UpdatedAt, arg.UserID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.HashedPw,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
